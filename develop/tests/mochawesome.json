{
  "stats": {
    "suites": 2,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-02T08:19:53.300Z",
    "end": "2024-04-02T08:19:53.426Z",
    "duration": 126,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e1566c0a-5810-47e1-bab0-dbb9e52aca53",
      "title": "",
      "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
      "file": "/test/lib/parser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "acde5c3a-2763-49bb-b7b6-b05b2652fbc3",
          "title": "Parser",
          "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
          "file": "/test/lib/parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e7a82232-adcf-43a8-8986-670f31256c3f",
              "title": "parseMail",
              "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
              "file": "/test/lib/parser.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse order mails (2023)",
                  "fullTitle": "Parser parseMail should parse order mails (2023)",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2023.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'rio3sec8wgb');\nassert.deepStrictEqual(result.location, {\n    name: 'Nordsee - Spandauer Straße',\n    address: 'Spandauer Str. 4, 10178 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2023-07-24T18:30:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2023-07-24T19:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 2);\nassert.strictEqual(result.price, 700);",
                  "err": {},
                  "uuid": "eefbc660-b502-4c43-8203-b1406eee7f81",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2023 + HTML encoding)",
                  "fullTitle": "Parser parseMail should parse order mails (2023 + HTML encoding)",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2023_encoding.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'kknd37xqvo3');\nassert.deepStrictEqual(result.location, {\n    name: 'Crunchy & Soft Bakery',\n    address: 'Alte Jakobstraße 77, 10179 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2023-10-27T10:00:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2023-10-27T11:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 1);\nassert.strictEqual(result.price, 300);",
                  "err": {},
                  "uuid": "b2a7bd1d-eaeb-4b07-b3e0-7bdd5c2d5410",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2021)",
                  "fullTitle": "Parser parseMail should parse order mails (2021)",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2021.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'dfaxqeu6f8d');\nassert.deepStrictEqual(result.location, {\n    name: 'Kamps Backstube - Checkpoint Charlie',\n    address: 'Friedrichstraße 41, 10969 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2024-04-30T16:30:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2024-04-30T17:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 1);\nassert.strictEqual(result.price, 430);",
                  "err": {},
                  "uuid": "aac36c45-cd73-4162-b2a1-80acc2309408",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2020)",
                  "fullTitle": "Parser parseMail should parse order mails (2020)",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2020.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'too38e9h7io');\nassert.deepStrictEqual(result.location, {\n    name: 'Rice On! - Berlin',\n    address: 'Europaplatz 1, 10557 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2024-07-29T18:30:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2024-07-29T19:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 1);\nassert.strictEqual(result.price, 400);",
                  "err": {},
                  "uuid": "9411d532-bb82-4919-91ea-3ebd7eea7509",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2023)",
                  "fullTitle": "Parser parseMail should parse time changes (2023)",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/time-changed/de_2023.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'change');\nassert.strictEqual(result.orderId, 'ecqpn6ux8sd');\nassert.ok(result.time.from.isSame(moment.tz('2023-06-28T18:20:00.000', 'Europe/Berlin')), `${result.time.from.toJSON()} === 2023-06-28T18:20:00.000`);\nassert.ok(result.time.to.isSame(moment.tz('2023-06-28T19:30:00.000', 'Europe/Berlin')), `${result.time.to.toJSON()} === 2023-06-28T19:30:00.000`);",
                  "err": {},
                  "uuid": "38ec5ade-748e-4239-a8df-a2d67bfbc085",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2024)",
                  "fullTitle": "Parser parseMail should parse time changes (2024)",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/time-changed/de_2024.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'change');\nassert.strictEqual(result.orderId, '8grepd07bgz');\nassert.ok(result.time.from.isSame(moment.tz('2024-01-10T15:30:00.000', 'Europe/Berlin')), `${result.time.from.toJSON()} === 2024-01-10T15:30:00.000`);\nassert.ok(result.time.to.isSame(moment.tz('2024-01-10T15:45:00.000', 'Europe/Berlin')), `${result.time.to.toJSON()} === 2024-01-10T15:45:00.000`);",
                  "err": {},
                  "uuid": "c2c09d80-4212-4d11-a90b-30ac1d64ff98",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2020)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2020)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/invoice/de_2020.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'invoice');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'too38e9h7io');\nassert.ok(result.invoicedAt.isSame(moment('2020-07-29T18:17:44.000Z')));",
                  "err": {},
                  "uuid": "4b8ea8b7-6993-407d-b254-36bf14fddd5b",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2021)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2021)",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/invoice/de_2021.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'invoice');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'dfaxqeu6f8d');\nassert.ok(result.invoicedAt.isSame(moment('2021-04-30T15:22:55.000Z')));",
                  "err": {},
                  "uuid": "29bb28e0-9ccb-4a5e-8170-47059172dbed",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2023)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2023)",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/invoice/de_2023.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'invoice');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'rio3sec8wgb');\nassert.ok(result.invoicedAt.isSame(moment('2023-07-24T17:29:16.000Z')));",
                  "err": {},
                  "uuid": "5625ddf8-b924-4b0f-a75c-654b4a8967e5",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (1)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (1)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/cancellation/de_1.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'cancel');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'gd3sypjntuz');\nassert.ok(result.cancelledAt.isSame(moment('2023-07-05T17:23:43.000Z')));",
                  "err": {},
                  "uuid": "01427d4e-a277-49bd-84a5-1d9731343f9d",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (2)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (2)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/cancellation/de_2.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'cancel');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'q3uxig9diky');\nassert.ok(result.cancelledAt.isSame(moment('2023-03-09T12:08:29.000Z')));",
                  "err": {},
                  "uuid": "4f95a94d-598f-4984-9940-b5243ff633d5",
                  "parentUUID": "e7a82232-adcf-43a8-8986-670f31256c3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eefbc660-b502-4c43-8203-b1406eee7f81",
                "b2a7bd1d-eaeb-4b07-b3e0-7bdd5c2d5410",
                "aac36c45-cd73-4162-b2a1-80acc2309408",
                "9411d532-bb82-4919-91ea-3ebd7eea7509",
                "38ec5ade-748e-4239-a8df-a2d67bfbc085",
                "c2c09d80-4212-4d11-a90b-30ac1d64ff98",
                "4b8ea8b7-6993-407d-b254-36bf14fddd5b",
                "29bb28e0-9ccb-4a5e-8170-47059172dbed",
                "5625ddf8-b924-4b0f-a75c-654b4a8967e5",
                "01427d4e-a277-49bd-84a5-1d9731343f9d",
                "4f95a94d-598f-4984-9940-b5243ff633d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}