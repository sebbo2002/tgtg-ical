{
  "stats": {
    "suites": 2,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-15T20:17:56.095Z",
    "end": "2024-04-15T20:17:56.219Z",
    "duration": 124,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fbc4acfb-3227-4152-9f89-019ba594f7df",
      "title": "",
      "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
      "file": "/test/lib/parser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f32e3ded-b6f8-49fe-97ce-81b4ad154c7a",
          "title": "Parser",
          "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
          "file": "/test/lib/parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b7016250-fd9d-4a89-9752-197fd897047b",
              "title": "parseMail",
              "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
              "file": "/test/lib/parser.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse order mails (2023)",
                  "fullTitle": "Parser parseMail should parse order mails (2023)",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2023.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'rio3sec8wgb');\nassert.deepStrictEqual(result.location, {\n    name: 'Nordsee - Spandauer Straße',\n    address: 'Spandauer Str. 4, 10178 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2023-07-24T18:30:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2023-07-24T19:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 2);\nassert.strictEqual(result.price, 700);",
                  "err": {},
                  "uuid": "d9130e40-57fc-4ec5-8418-dcc5d8bfec9d",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2023 + HTML encoding)",
                  "fullTitle": "Parser parseMail should parse order mails (2023 + HTML encoding)",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2023_encoding.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'kknd37xqvo3');\nassert.deepStrictEqual(result.location, {\n    name: 'Crunchy & Soft Bakery',\n    address: 'Alte Jakobstraße 77, 10179 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2023-10-27T10:00:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2023-10-27T11:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 1);\nassert.strictEqual(result.price, 300);",
                  "err": {},
                  "uuid": "60251c38-bb14-4353-85b9-49fcf53c3831",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2021)",
                  "fullTitle": "Parser parseMail should parse order mails (2021)",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2021.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'dfaxqeu6f8d');\nassert.deepStrictEqual(result.location, {\n    name: 'Kamps Backstube - Checkpoint Charlie',\n    address: 'Friedrichstraße 41, 10969 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2024-04-30T16:30:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2024-04-30T17:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 1);\nassert.strictEqual(result.price, 430);",
                  "err": {},
                  "uuid": "c3e20bb4-d4f0-47ac-a774-4d6e8bc98924",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2020)",
                  "fullTitle": "Parser parseMail should parse order mails (2020)",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2020.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'too38e9h7io');\nassert.deepStrictEqual(result.location, {\n    name: 'Rice On! - Berlin',\n    address: 'Europaplatz 1, 10557 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2024-07-29T18:30:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2024-07-29T19:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 1);\nassert.strictEqual(result.price, 400);",
                  "err": {},
                  "uuid": "42ae366a-f232-44d2-9d35-78386aed0e48",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2023)",
                  "fullTitle": "Parser parseMail should parse time changes (2023)",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/time-changed/de_2023.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'change');\nassert.strictEqual(result.orderId, 'ecqpn6ux8sd');\nassert.ok(result.time.from.isSame(moment.tz('2023-06-28T18:20:00.000', 'Europe/Berlin')), `${result.time.from.toJSON()} === 2023-06-28T18:20:00.000`);\nassert.ok(result.time.to.isSame(moment.tz('2023-06-28T19:30:00.000', 'Europe/Berlin')), `${result.time.to.toJSON()} === 2023-06-28T19:30:00.000`);",
                  "err": {},
                  "uuid": "d405994a-1df6-4062-8154-a0e5e6df41fa",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2024)",
                  "fullTitle": "Parser parseMail should parse time changes (2024)",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/time-changed/de_2024.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'change');\nassert.strictEqual(result.orderId, '8grepd07bgz');\nassert.ok(result.time.from.isSame(moment.tz('2024-01-10T15:30:00.000', 'Europe/Berlin')), `${result.time.from.toJSON()} === 2024-01-10T15:30:00.000`);\nassert.ok(result.time.to.isSame(moment.tz('2024-01-10T15:45:00.000', 'Europe/Berlin')), `${result.time.to.toJSON()} === 2024-01-10T15:45:00.000`);",
                  "err": {},
                  "uuid": "9bb32865-1642-490b-baff-a74686d3bf4a",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2020)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2020)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/invoice/de_2020.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'invoice');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'too38e9h7io');\nassert.ok(result.invoicedAt.isSame(moment('2020-07-29T18:17:44.000Z')));",
                  "err": {},
                  "uuid": "2ccd469c-9e08-495a-8c07-d36b9b1d8c51",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2021)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2021)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/invoice/de_2021.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'invoice');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'dfaxqeu6f8d');\nassert.ok(result.invoicedAt.isSame(moment('2021-04-30T15:22:55.000Z')));",
                  "err": {},
                  "uuid": "1dc5d8d1-b729-408d-84d0-f6f46c06cf07",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2023)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2023)",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/invoice/de_2023.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'invoice');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'rio3sec8wgb');\nassert.ok(result.invoicedAt.isSame(moment('2023-07-24T17:29:16.000Z')));",
                  "err": {},
                  "uuid": "5794b1d7-7b11-4aef-9c03-2585dcd2bda0",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (1)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (1)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/cancellation/de_1.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'cancel');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'gd3sypjntuz');\nassert.ok(result.cancelledAt.isSame(moment('2023-07-05T17:23:43.000Z')));",
                  "err": {},
                  "uuid": "6caa46a8-edb1-4119-b44e-bc77f72e77c5",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (2)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (2)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/cancellation/de_2.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'cancel');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'q3uxig9diky');\nassert.ok(result.cancelledAt.isSame(moment('2023-03-09T12:08:29.000Z')));",
                  "err": {},
                  "uuid": "37ba1048-ee10-45e4-a86c-425dfc8a7a4b",
                  "parentUUID": "b7016250-fd9d-4a89-9752-197fd897047b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9130e40-57fc-4ec5-8418-dcc5d8bfec9d",
                "60251c38-bb14-4353-85b9-49fcf53c3831",
                "c3e20bb4-d4f0-47ac-a774-4d6e8bc98924",
                "42ae366a-f232-44d2-9d35-78386aed0e48",
                "d405994a-1df6-4062-8154-a0e5e6df41fa",
                "9bb32865-1642-490b-baff-a74686d3bf4a",
                "2ccd469c-9e08-495a-8c07-d36b9b1d8c51",
                "1dc5d8d1-b729-408d-84d0-f6f46c06cf07",
                "5794b1d7-7b11-4aef-9c03-2585dcd2bda0",
                "6caa46a8-edb1-4119-b44e-bc77f72e77c5",
                "37ba1048-ee10-45e4-a86c-425dfc8a7a4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}