{
  "stats": {
    "suites": 2,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-12T07:28:25.520Z",
    "end": "2025-04-12T07:28:25.626Z",
    "duration": 106,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "35426d39-3952-489c-9bd7-6b9b912f38aa",
      "title": "",
      "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
      "file": "/test/lib/parser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12d87273-d0de-4eef-8016-e0b515642b7d",
          "title": "Parser",
          "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
          "file": "/test/lib/parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fb147b2f-973a-454f-917c-934775106f97",
              "title": "parseMail",
              "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
              "file": "/test/lib/parser.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse order mails (2025)",
                  "fullTitle": "Parser parseMail should parse order mails (2025)",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2025.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"a85czf7ca5sx0\");assert.strictEqual(result.location.name,\"Restaurant \\xC4nnchen von Tharau\");assert.strictEqual(result.location.address,\"Rolandufer 6, 10179 Berlin, Deutschland\");assert.ok(result.time.from.isSame(moment.tz(\"2025-01-24T14:00:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2025-01-24T14:30:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,3);assert.strictEqual(result.price,1140)",
                  "err": {},
                  "uuid": "8dae7684-b900-49e4-ae74-1432cd8284fb",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2024)",
                  "fullTitle": "Parser parseMail should parse order mails (2024)",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2024.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"e8344qmk23750\");assert.strictEqual(result.location.name,\"Nordsee - Spandauer Stra\\xDFe\");assert.strictEqual(result.location.address,\"Spandauer Str. 4, 10178 Berlin, Deutschland\");assert.ok(result.time.from.isSame(moment.tz(\"2024-10-21T18:00:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2024-10-21T18:30:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,2);assert.strictEqual(result.price,800)",
                  "err": {},
                  "uuid": "7d3d8566-8f0e-4c97-a010-850c7c05d9ec",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2023)",
                  "fullTitle": "Parser parseMail should parse order mails (2023)",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2023.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"rio3sec8wgb\");assert.deepStrictEqual(result.location,{name:\"Nordsee - Spandauer Stra\\xDFe\",address:\"Spandauer Str. 4, 10178 Berlin, Deutschland\"});assert.ok(result.time.from.isSame(moment.tz(\"2023-07-24T18:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2023-07-24T19:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,2);assert.strictEqual(result.price,700)",
                  "err": {},
                  "uuid": "735a64c3-2295-414e-9a5a-b0512e1b6333",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2023 + HTML encoding)",
                  "fullTitle": "Parser parseMail should parse order mails (2023 + HTML encoding)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2023_encoding.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"kknd37xqvo3\");assert.deepStrictEqual(result.location,{name:\"Crunchy & Soft Bakery\",address:\"Alte Jakobstra\\xDFe 77, 10179 Berlin, Deutschland\"});assert.ok(result.time.from.isSame(moment.tz(\"2023-10-27T10:00:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2023-10-27T11:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,300)",
                  "err": {},
                  "uuid": "0c5f480b-1516-4d4d-adbd-8ea6d7060ef9",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2021)",
                  "fullTitle": "Parser parseMail should parse order mails (2021)",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2021.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"dfaxqeu6f8d\");assert.deepStrictEqual(result.location,{name:\"Kamps Backstube - Checkpoint Charlie\",address:\"Friedrichstra\\xDFe 41, 10969 Berlin, Deutschland\"});const year=moment(result.time.order).year();assert.ok(result.time.from.isSame(moment.tz(year+\"-04-30T16:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(year+\"-04-30T17:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,430)",
                  "err": {},
                  "uuid": "a11b2e3e-ec9d-4712-9474-15dcd0cac7a5",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2020)",
                  "fullTitle": "Parser parseMail should parse order mails (2020)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2020.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"too38e9h7io\");assert.deepStrictEqual(result.location,{name:\"Rice On! - Berlin\",address:\"Europaplatz 1, 10557 Berlin, Deutschland\"});assert.ok(result.time.from.isSame(moment.tz(\"2020-07-29T18:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2020-07-29T19:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,400)",
                  "err": {},
                  "uuid": "2e60c5d7-617c-4d73-ad93-79ef6118aacd",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2023)",
                  "fullTitle": "Parser parseMail should parse time changes (2023)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/time-changed/de_2023.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"change\");assert.strictEqual(result.orderId,\"ecqpn6ux8sd\");assert.ok(result.time.from.isSame(moment.tz(\"2023-06-28T18:20:00.000\",\"Europe/Berlin\")),`${result.time.from.toJSON()} === 2023-06-28T18:20:00.000`);assert.ok(result.time.to.isSame(moment.tz(\"2023-06-28T19:30:00.000\",\"Europe/Berlin\")),`${result.time.to.toJSON()} === 2023-06-28T19:30:00.000`)",
                  "err": {},
                  "uuid": "d5469ce0-9c1a-416b-817c-1dbc6b43ebb2",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2024)",
                  "fullTitle": "Parser parseMail should parse time changes (2024)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/time-changed/de_2024.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"change\");assert.strictEqual(result.orderId,\"8grepd07bgz\");assert.ok(result.time.from.isSame(moment.tz(\"2024-01-10T15:30:00.000\",\"Europe/Berlin\")),`${result.time.from.toJSON()} === 2024-01-10T15:30:00.000`);assert.ok(result.time.to.isSame(moment.tz(\"2024-01-10T15:45:00.000\",\"Europe/Berlin\")),`${result.time.to.toJSON()} === 2024-01-10T15:45:00.000`)",
                  "err": {},
                  "uuid": "eef3eafd-79a1-4f45-8e5f-39c78c547a2d",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2020)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2020)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/invoice/de_2020.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"too38e9h7io\");assert.ok(result.invoicedAt.isSame(moment(\"2020-07-29T18:17:44.000Z\")))",
                  "err": {},
                  "uuid": "594482b9-0955-4250-8388-8d0dda5e6209",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2021)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2021)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/invoice/de_2021.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"dfaxqeu6f8d\");assert.ok(result.invoicedAt.isSame(moment(\"2021-04-30T15:22:55.000Z\")))",
                  "err": {},
                  "uuid": "67f2c96d-3f8d-49e4-90cd-69110fccc20c",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2023)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2023)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/invoice/de_2023.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"rio3sec8wgb\");assert.ok(result.invoicedAt.isSame(moment(\"2023-07-24T17:29:16.000Z\")))",
                  "err": {},
                  "uuid": "da2262ea-e3dc-4972-813d-3ec7d7c9fb3a",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (1)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (1)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/cancellation/de_1.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"cancel\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"gd3sypjntuz\");assert.ok(result.cancelledAt.isSame(moment(\"2023-07-05T17:23:43.000Z\")))",
                  "err": {},
                  "uuid": "6f6ee4cd-cf2f-4b59-948a-15eccdc2fc7f",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (2)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (2)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/cancellation/de_2.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"cancel\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"q3uxig9diky\");assert.ok(result.cancelledAt.isSame(moment(\"2023-03-09T12:08:29.000Z\")))",
                  "err": {},
                  "uuid": "9788eba5-1f22-4e22-9260-0883705210f7",
                  "parentUUID": "fb147b2f-973a-454f-917c-934775106f97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8dae7684-b900-49e4-ae74-1432cd8284fb",
                "7d3d8566-8f0e-4c97-a010-850c7c05d9ec",
                "735a64c3-2295-414e-9a5a-b0512e1b6333",
                "0c5f480b-1516-4d4d-adbd-8ea6d7060ef9",
                "a11b2e3e-ec9d-4712-9474-15dcd0cac7a5",
                "2e60c5d7-617c-4d73-ad93-79ef6118aacd",
                "d5469ce0-9c1a-416b-817c-1dbc6b43ebb2",
                "eef3eafd-79a1-4f45-8e5f-39c78c547a2d",
                "594482b9-0955-4250-8388-8d0dda5e6209",
                "67f2c96d-3f8d-49e4-90cd-69110fccc20c",
                "da2262ea-e3dc-4972-813d-3ec7d7c9fb3a",
                "6f6ee4cd-cf2f-4b59-948a-15eccdc2fc7f",
                "9788eba5-1f22-4e22-9260-0883705210f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}