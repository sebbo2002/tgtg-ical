{
  "stats": {
    "suites": 2,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-16T16:45:02.062Z",
    "end": "2023-08-16T16:45:02.390Z",
    "duration": 328,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6a7fb7d2-2294-4cbc-b934-547790fd8709",
      "title": "",
      "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
      "file": "/test/lib/parser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e13d7907-55a6-48b3-a4d4-83dea8f55f9e",
          "title": "Parser",
          "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
          "file": "/test/lib/parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
              "title": "parseMail",
              "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
              "file": "/test/lib/parser.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse order mails (2023)",
                  "fullTitle": "Parser parseMail should parse order mails (2023)",
                  "timedOut": false,
                  "duration": 226,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2023.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'rio3sec8wgb');\nassert.deepStrictEqual(result.location, {\n    name: 'Nordsee - Spandauer Straße',\n    address: 'Spandauer Str. 4, 10178 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2023-07-24T18:30:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2023-07-24T19:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 2);\nassert.strictEqual(result.price, 700);",
                  "err": {},
                  "uuid": "1b1c8399-691f-44eb-97cf-6bfab2ed76cb",
                  "parentUUID": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2021)",
                  "fullTitle": "Parser parseMail should parse order mails (2021)",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2021.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'dfaxqeu6f8d');\nassert.deepStrictEqual(result.location, {\n    name: 'Kamps Backstube - Checkpoint Charlie',\n    address: 'Friedrichstraße 41, 10969 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2024-04-30T16:30:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2024-04-30T17:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 1);\nassert.strictEqual(result.price, 430);",
                  "err": {},
                  "uuid": "4daf78ef-9f99-453d-9581-bb76c23cfdca",
                  "parentUUID": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2020)",
                  "fullTitle": "Parser parseMail should parse order mails (2020)",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/order/de_2020.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'order');\nassert.strictEqual(result.orderId, 'too38e9h7io');\nassert.deepStrictEqual(result.location, {\n    name: 'Rice On! - Berlin',\n    address: 'Europaplatz 1, 10557 Berlin, Deutschland'\n});\nassert.ok(result.time.from.isSame(moment.tz('2024-07-29T18:30:00.000', 'Europe/Berlin')));\nassert.ok(result.time.to.isSame(moment.tz('2024-07-29T19:00:00.000', 'Europe/Berlin')));\nassert.strictEqual(result.amount, 1);\nassert.strictEqual(result.price, 400);",
                  "err": {},
                  "uuid": "046c83e4-8d5e-406f-8107-83116c13ff87",
                  "parentUUID": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes",
                  "fullTitle": "Parser parseMail should parse time changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/time-changed/de_2023.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'change');\nassert.strictEqual(result.orderId, 'ecqpn6ux8sd');\nassert.ok(result.time.from.isSame(moment.tz('2023-06-28T18:20:00.000', 'Europe/Berlin')), `${result.time.from.toJSON()} === 2023-06-28T18:20:00.000`);\nassert.ok(result.time.to.isSame(moment.tz('2023-06-28T19:30:00.000', 'Europe/Berlin')), `${result.time.to.toJSON()} === 2023-06-28T19:30:00.000`);",
                  "err": {},
                  "uuid": "d287437a-a980-468a-88c8-b4ee05903476",
                  "parentUUID": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2020)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2020)",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/invoice/de_2020.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'invoice');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'too38e9h7io');\nassert.ok(result.invoicedAt.isSame(moment('2020-07-29T18:17:44.000Z')));",
                  "err": {},
                  "uuid": "552c67f2-254a-4919-84b2-fc3c1afe86ac",
                  "parentUUID": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2021)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2021)",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/invoice/de_2021.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'invoice');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'dfaxqeu6f8d');\nassert.ok(result.invoicedAt.isSame(moment('2021-04-30T15:22:55.000Z')));",
                  "err": {},
                  "uuid": "aca7a559-bef5-49a1-bd57-277f0f653ea8",
                  "parentUUID": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2023)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2023)",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/invoice/de_2023.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'invoice');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'rio3sec8wgb');\nassert.ok(result.invoicedAt.isSame(moment('2023-07-24T17:29:16.000Z')));",
                  "err": {},
                  "uuid": "c9d4a00d-d69c-4a99-af81-5fd17eee9582",
                  "parentUUID": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (1)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (1)",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/cancellation/de_1.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'cancel');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'gd3sypjntuz');\nassert.ok(result.cancelledAt.isSame(moment('2023-07-05T17:23:43.000Z')));",
                  "err": {},
                  "uuid": "61054c90-7232-4cea-b276-1421691eb7aa",
                  "parentUUID": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (2)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (2)",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail = await readFile(fixtures + '/cancellation/de_2.eml', 'utf-8');\nconst result = await Parser.parseMail(mail);\nassert.strictEqual(result.type, 'cancel');\nassert.strictEqual(result.to, '**********@tgtg-ical.sebbo.net');\nassert.strictEqual(result.orderId, 'q3uxig9diky');\nassert.ok(result.cancelledAt.isSame(moment('2023-03-09T12:08:29.000Z')));",
                  "err": {},
                  "uuid": "a4e640dd-2a3e-4d22-b324-11743160e0d6",
                  "parentUUID": "3acca168-1b6f-41db-ba89-0deb0a296f7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b1c8399-691f-44eb-97cf-6bfab2ed76cb",
                "4daf78ef-9f99-453d-9581-bb76c23cfdca",
                "046c83e4-8d5e-406f-8107-83116c13ff87",
                "d287437a-a980-468a-88c8-b4ee05903476",
                "552c67f2-254a-4919-84b2-fc3c1afe86ac",
                "aca7a559-bef5-49a1-bd57-277f0f653ea8",
                "c9d4a00d-d69c-4a99-af81-5fd17eee9582",
                "61054c90-7232-4cea-b276-1421691eb7aa",
                "a4e640dd-2a3e-4d22-b324-11743160e0d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 319,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}