{
  "stats": {
    "suites": 2,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-29T08:50:48.309Z",
    "end": "2024-10-29T08:50:48.418Z",
    "duration": 109,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "32b48e8a-fd61-4e19-8dc6-803b9efe6f75",
      "title": "",
      "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
      "file": "/test/lib/parser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1e2c8913-0d38-4794-84be-16b41c63effd",
          "title": "Parser",
          "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
          "file": "/test/lib/parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
              "title": "parseMail",
              "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
              "file": "/test/lib/parser.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse order mails (2024)",
                  "fullTitle": "Parser parseMail should parse order mails (2024)",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2024.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"e8344qmk23750\");assert.strictEqual(result.location.name,\"Nordsee - Spandauer Stra\\xDFe\");assert.strictEqual(result.location.address,\"Spandauer Str. 4, 10178 Berlin, Deutschland\");assert.ok(result.time.from.isSame(moment.tz(\"2024-10-21T18:00:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2024-10-21T18:30:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,2);assert.strictEqual(result.price,800)",
                  "err": {},
                  "uuid": "e5e2e87f-c99f-45d2-b63a-cfcf6a61a1f4",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2023)",
                  "fullTitle": "Parser parseMail should parse order mails (2023)",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2023.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"rio3sec8wgb\");assert.deepStrictEqual(result.location,{name:\"Nordsee - Spandauer Stra\\xDFe\",address:\"Spandauer Str. 4, 10178 Berlin, Deutschland\"});assert.ok(result.time.from.isSame(moment.tz(\"2023-07-24T18:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2023-07-24T19:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,2);assert.strictEqual(result.price,700)",
                  "err": {},
                  "uuid": "fc20eb87-97cd-4069-a27f-f179922f0e4d",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2023 + HTML encoding)",
                  "fullTitle": "Parser parseMail should parse order mails (2023 + HTML encoding)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2023_encoding.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"kknd37xqvo3\");assert.deepStrictEqual(result.location,{name:\"Crunchy & Soft Bakery\",address:\"Alte Jakobstra\\xDFe 77, 10179 Berlin, Deutschland\"});assert.ok(result.time.from.isSame(moment.tz(\"2023-10-27T10:00:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2023-10-27T11:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,300)",
                  "err": {},
                  "uuid": "0746540e-4bee-4eaa-bc26-8bc2b0cd648b",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2021)",
                  "fullTitle": "Parser parseMail should parse order mails (2021)",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2021.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"dfaxqeu6f8d\");assert.deepStrictEqual(result.location,{name:\"Kamps Backstube - Checkpoint Charlie\",address:\"Friedrichstra\\xDFe 41, 10969 Berlin, Deutschland\"});const year=moment(result.time.order).year();assert.ok(result.time.from.isSame(moment.tz(year+\"-04-30T16:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(year+\"-04-30T17:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,430)",
                  "err": {},
                  "uuid": "75064e24-c213-4687-aadf-c911f3173a01",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2020)",
                  "fullTitle": "Parser parseMail should parse order mails (2020)",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2020.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"too38e9h7io\");assert.deepStrictEqual(result.location,{name:\"Rice On! - Berlin\",address:\"Europaplatz 1, 10557 Berlin, Deutschland\"});assert.ok(result.time.from.isSame(moment.tz(\"2020-07-29T18:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2020-07-29T19:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,400)",
                  "err": {},
                  "uuid": "6484c05a-6716-4101-954e-77cd147503c3",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2023)",
                  "fullTitle": "Parser parseMail should parse time changes (2023)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/time-changed/de_2023.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"change\");assert.strictEqual(result.orderId,\"ecqpn6ux8sd\");assert.ok(result.time.from.isSame(moment.tz(\"2023-06-28T18:20:00.000\",\"Europe/Berlin\")),`${result.time.from.toJSON()} === 2023-06-28T18:20:00.000`);assert.ok(result.time.to.isSame(moment.tz(\"2023-06-28T19:30:00.000\",\"Europe/Berlin\")),`${result.time.to.toJSON()} === 2023-06-28T19:30:00.000`)",
                  "err": {},
                  "uuid": "d9f516f7-83e4-40ea-8fc3-c79d34341e23",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2024)",
                  "fullTitle": "Parser parseMail should parse time changes (2024)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/time-changed/de_2024.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"change\");assert.strictEqual(result.orderId,\"8grepd07bgz\");assert.ok(result.time.from.isSame(moment.tz(\"2024-01-10T15:30:00.000\",\"Europe/Berlin\")),`${result.time.from.toJSON()} === 2024-01-10T15:30:00.000`);assert.ok(result.time.to.isSame(moment.tz(\"2024-01-10T15:45:00.000\",\"Europe/Berlin\")),`${result.time.to.toJSON()} === 2024-01-10T15:45:00.000`)",
                  "err": {},
                  "uuid": "c9e692a7-2e9d-48c6-abfa-79e55bdb6dd4",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2020)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2020)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/invoice/de_2020.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"too38e9h7io\");assert.ok(result.invoicedAt.isSame(moment(\"2020-07-29T18:17:44.000Z\")))",
                  "err": {},
                  "uuid": "659c100e-b04b-4a5b-9564-5057342e38cb",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2021)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2021)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/invoice/de_2021.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"dfaxqeu6f8d\");assert.ok(result.invoicedAt.isSame(moment(\"2021-04-30T15:22:55.000Z\")))",
                  "err": {},
                  "uuid": "343231c0-e092-4dcd-8780-3bc8286d70ea",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2023)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2023)",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/invoice/de_2023.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"rio3sec8wgb\");assert.ok(result.invoicedAt.isSame(moment(\"2023-07-24T17:29:16.000Z\")))",
                  "err": {},
                  "uuid": "1661ae7b-025b-4ae2-81c1-05a0c8ee8094",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (1)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (1)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/cancellation/de_1.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"cancel\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"gd3sypjntuz\");assert.ok(result.cancelledAt.isSame(moment(\"2023-07-05T17:23:43.000Z\")))",
                  "err": {},
                  "uuid": "3e076665-08f1-48c1-b3bb-e40eba2271b6",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (2)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (2)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/cancellation/de_2.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"cancel\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"q3uxig9diky\");assert.ok(result.cancelledAt.isSame(moment(\"2023-03-09T12:08:29.000Z\")))",
                  "err": {},
                  "uuid": "ccdcc5a1-cefd-4ba5-a16f-60fc5b0aac2b",
                  "parentUUID": "b85e6d3f-bfcb-4976-b885-36fca230c1e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5e2e87f-c99f-45d2-b63a-cfcf6a61a1f4",
                "fc20eb87-97cd-4069-a27f-f179922f0e4d",
                "0746540e-4bee-4eaa-bc26-8bc2b0cd648b",
                "75064e24-c213-4687-aadf-c911f3173a01",
                "6484c05a-6716-4101-954e-77cd147503c3",
                "d9f516f7-83e4-40ea-8fc3-c79d34341e23",
                "c9e692a7-2e9d-48c6-abfa-79e55bdb6dd4",
                "659c100e-b04b-4a5b-9564-5057342e38cb",
                "343231c0-e092-4dcd-8780-3bc8286d70ea",
                "1661ae7b-025b-4ae2-81c1-05a0c8ee8094",
                "3e076665-08f1-48c1-b3bb-e40eba2271b6",
                "ccdcc5a1-cefd-4ba5-a16f-60fc5b0aac2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}