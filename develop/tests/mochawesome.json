{
  "stats": {
    "suites": 2,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-21T01:13:51.905Z",
    "end": "2024-09-21T01:13:52.008Z",
    "duration": 103,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f41ecc7d-ce1d-48f3-b95e-cc904993a173",
      "title": "",
      "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
      "file": "/test/lib/parser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c79119f-69ec-417b-98c2-eda83d7d0792",
          "title": "Parser",
          "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
          "file": "/test/lib/parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
              "title": "parseMail",
              "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
              "file": "/test/lib/parser.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse order mails (2023)",
                  "fullTitle": "Parser parseMail should parse order mails (2023)",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2023.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"rio3sec8wgb\");assert.deepStrictEqual(result.location,{name:\"Nordsee - Spandauer Stra\\xDFe\",address:\"Spandauer Str. 4, 10178 Berlin, Deutschland\"});assert.ok(result.time.from.isSame(moment.tz(\"2023-07-24T18:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2023-07-24T19:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,2);assert.strictEqual(result.price,700)",
                  "err": {},
                  "uuid": "ae95bdd2-9b58-4be3-a77c-25a0b36c975b",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2023 + HTML encoding)",
                  "fullTitle": "Parser parseMail should parse order mails (2023 + HTML encoding)",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2023_encoding.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"kknd37xqvo3\");assert.deepStrictEqual(result.location,{name:\"Crunchy & Soft Bakery\",address:\"Alte Jakobstra\\xDFe 77, 10179 Berlin, Deutschland\"});assert.ok(result.time.from.isSame(moment.tz(\"2023-10-27T10:00:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2023-10-27T11:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,300)",
                  "err": {},
                  "uuid": "6c179820-d3b8-4c28-8fd1-f789dc862921",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2021)",
                  "fullTitle": "Parser parseMail should parse order mails (2021)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2021.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"dfaxqeu6f8d\");assert.deepStrictEqual(result.location,{name:\"Kamps Backstube - Checkpoint Charlie\",address:\"Friedrichstra\\xDFe 41, 10969 Berlin, Deutschland\"});const year=moment(result.time.order).year();assert.ok(result.time.from.isSame(moment.tz(year+\"-04-30T16:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(year+\"-04-30T17:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,430)",
                  "err": {},
                  "uuid": "0f757b94-2adb-4127-b751-d0fefd1f18b8",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2020)",
                  "fullTitle": "Parser parseMail should parse order mails (2020)",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/order/de_2020.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"too38e9h7io\");assert.deepStrictEqual(result.location,{name:\"Rice On! - Berlin\",address:\"Europaplatz 1, 10557 Berlin, Deutschland\"});assert.ok(result.time.from.isSame(moment.tz(\"2020-07-29T18:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(moment.tz(\"2020-07-29T19:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,400)",
                  "err": {},
                  "uuid": "2fec17c0-aff2-4af0-b51e-434cae93a1df",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2023)",
                  "fullTitle": "Parser parseMail should parse time changes (2023)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/time-changed/de_2023.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"change\");assert.strictEqual(result.orderId,\"ecqpn6ux8sd\");assert.ok(result.time.from.isSame(moment.tz(\"2023-06-28T18:20:00.000\",\"Europe/Berlin\")),`${result.time.from.toJSON()} === 2023-06-28T18:20:00.000`);assert.ok(result.time.to.isSame(moment.tz(\"2023-06-28T19:30:00.000\",\"Europe/Berlin\")),`${result.time.to.toJSON()} === 2023-06-28T19:30:00.000`)",
                  "err": {},
                  "uuid": "573d5a43-a304-4f82-9f5b-01ace3bd7d41",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2024)",
                  "fullTitle": "Parser parseMail should parse time changes (2024)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/time-changed/de_2024.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"change\");assert.strictEqual(result.orderId,\"8grepd07bgz\");assert.ok(result.time.from.isSame(moment.tz(\"2024-01-10T15:30:00.000\",\"Europe/Berlin\")),`${result.time.from.toJSON()} === 2024-01-10T15:30:00.000`);assert.ok(result.time.to.isSame(moment.tz(\"2024-01-10T15:45:00.000\",\"Europe/Berlin\")),`${result.time.to.toJSON()} === 2024-01-10T15:45:00.000`)",
                  "err": {},
                  "uuid": "0ca10c8c-22ff-461d-80e9-7e94d5b4666b",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2020)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2020)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/invoice/de_2020.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"too38e9h7io\");assert.ok(result.invoicedAt.isSame(moment(\"2020-07-29T18:17:44.000Z\")))",
                  "err": {},
                  "uuid": "9e6c18cb-7a18-4e1d-914f-acb49135cdda",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2021)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2021)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/invoice/de_2021.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"dfaxqeu6f8d\");assert.ok(result.invoicedAt.isSame(moment(\"2021-04-30T15:22:55.000Z\")))",
                  "err": {},
                  "uuid": "c2989fd0-d8f8-42cd-b5f7-4bfaefa3b153",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2023)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2023)",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/invoice/de_2023.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"rio3sec8wgb\");assert.ok(result.invoicedAt.isSame(moment(\"2023-07-24T17:29:16.000Z\")))",
                  "err": {},
                  "uuid": "c4c74b00-5858-46d2-a829-07e20b7305a5",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (1)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (1)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/cancellation/de_1.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"cancel\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"gd3sypjntuz\");assert.ok(result.cancelledAt.isSame(moment(\"2023-07-05T17:23:43.000Z\")))",
                  "err": {},
                  "uuid": "38f49252-59c4-4620-a0e8-d6a168197e6e",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (2)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (2)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await readFile(fixtures+\"/cancellation/de_2.eml\",\"utf-8\");const result=await Parser.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"cancel\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"q3uxig9diky\");assert.ok(result.cancelledAt.isSame(moment(\"2023-03-09T12:08:29.000Z\")))",
                  "err": {},
                  "uuid": "45a7a629-cd6c-4784-90d7-0b1a625b047b",
                  "parentUUID": "4b974f9b-3dbe-43c3-bedd-0c701c0d1f48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae95bdd2-9b58-4be3-a77c-25a0b36c975b",
                "6c179820-d3b8-4c28-8fd1-f789dc862921",
                "0f757b94-2adb-4127-b751-d0fefd1f18b8",
                "2fec17c0-aff2-4af0-b51e-434cae93a1df",
                "573d5a43-a304-4f82-9f5b-01ace3bd7d41",
                "0ca10c8c-22ff-461d-80e9-7e94d5b4666b",
                "9e6c18cb-7a18-4e1d-914f-acb49135cdda",
                "c2989fd0-d8f8-42cd-b5f7-4bfaefa3b153",
                "c4c74b00-5858-46d2-a829-07e20b7305a5",
                "38f49252-59c4-4620-a0e8-d6a168197e6e",
                "45a7a629-cd6c-4784-90d7-0b1a625b047b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}