{
  "stats": {
    "suites": 2,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-04T08:56:46.244Z",
    "end": "2025-07-04T08:56:46.344Z",
    "duration": 100,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "26b9e523-e69b-4353-af23-dd15ed04d3ad",
      "title": "",
      "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
      "file": "/test/lib/parser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c9ee16f2-b9db-4ae4-805c-7dcfeb3ae8d4",
          "title": "Parser",
          "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
          "file": "/test/lib/parser.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "996859ba-402b-4040-82ee-fadead7a7d99",
              "title": "parseMail",
              "fullFile": "/home/runner/work/tgtg-ical/tgtg-ical/test/lib/parser.spec.ts",
              "file": "/test/lib/parser.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse order mails (2025)",
                  "fullTitle": "Parser parseMail should parse order mails (2025)",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/order/de_2025.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"a85czf7ca5sx0\");assert.strictEqual(result.location.name,\"Restaurant \\xC4nnchen von Tharau\");assert.strictEqual(result.location.address,\"Rolandufer 6, 10179 Berlin, Deutschland\");assert.ok(result.time.from.isSame(import_moment_timezone.default.tz(\"2025-01-24T14:00:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(import_moment_timezone.default.tz(\"2025-01-24T14:30:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,3);assert.strictEqual(result.price,1140)",
                  "err": {},
                  "uuid": "b824db04-181f-44df-bab9-935889bb1795",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2024)",
                  "fullTitle": "Parser parseMail should parse order mails (2024)",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/order/de_2024.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"e8344qmk23750\");assert.strictEqual(result.location.name,\"Nordsee - Spandauer Stra\\xDFe\");assert.strictEqual(result.location.address,\"Spandauer Str. 4, 10178 Berlin, Deutschland\");assert.ok(result.time.from.isSame(import_moment_timezone.default.tz(\"2024-10-21T18:00:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(import_moment_timezone.default.tz(\"2024-10-21T18:30:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,2);assert.strictEqual(result.price,800)",
                  "err": {},
                  "uuid": "6131a5a0-00a8-4144-b077-8ac8e2e14011",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2023)",
                  "fullTitle": "Parser parseMail should parse order mails (2023)",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/order/de_2023.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"rio3sec8wgb\");assert.deepStrictEqual(result.location,{address:\"Spandauer Str. 4, 10178 Berlin, Deutschland\",name:\"Nordsee - Spandauer Stra\\xDFe\"});assert.ok(result.time.from.isSame(import_moment_timezone.default.tz(\"2023-07-24T18:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(import_moment_timezone.default.tz(\"2023-07-24T19:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,2);assert.strictEqual(result.price,700)",
                  "err": {},
                  "uuid": "6996637f-0017-43ea-844f-dbfc9d6d0e91",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2023 + HTML encoding)",
                  "fullTitle": "Parser parseMail should parse order mails (2023 + HTML encoding)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/order/de_2023_encoding.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"kknd37xqvo3\");assert.deepStrictEqual(result.location,{address:\"Alte Jakobstra\\xDFe 77, 10179 Berlin, Deutschland\",name:\"Crunchy & Soft Bakery\"});assert.ok(result.time.from.isSame(import_moment_timezone.default.tz(\"2023-10-27T10:00:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(import_moment_timezone.default.tz(\"2023-10-27T11:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,300)",
                  "err": {},
                  "uuid": "9fe36b49-491f-449d-b001-03dca973a591",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2021)",
                  "fullTitle": "Parser parseMail should parse order mails (2021)",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/order/de_2021.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"dfaxqeu6f8d\");assert.deepStrictEqual(result.location,{address:\"Friedrichstra\\xDFe 41, 10969 Berlin, Deutschland\",name:\"Kamps Backstube - Checkpoint Charlie\"});const year=(0,import_moment_timezone.default)(result.time.order).year();assert.ok(result.time.from.isSame(import_moment_timezone.default.tz(year+\"-04-30T16:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(import_moment_timezone.default.tz(year+\"-04-30T17:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,430)",
                  "err": {},
                  "uuid": "2efde80c-03eb-4b25-8d3f-0f58bb35d99f",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse order mails (2020)",
                  "fullTitle": "Parser parseMail should parse order mails (2020)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/order/de_2020.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"order\");assert.strictEqual(result.orderId,\"too38e9h7io\");assert.deepStrictEqual(result.location,{address:\"Europaplatz 1, 10557 Berlin, Deutschland\",name:\"Rice On! - Berlin\"});assert.ok(result.time.from.isSame(import_moment_timezone.default.tz(\"2020-07-29T18:30:00.000\",\"Europe/Berlin\")));assert.ok(result.time.to.isSame(import_moment_timezone.default.tz(\"2020-07-29T19:00:00.000\",\"Europe/Berlin\")));assert.strictEqual(result.amount,1);assert.strictEqual(result.price,400)",
                  "err": {},
                  "uuid": "3a03737c-d4fb-47f9-963c-7ba0c181b1ad",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2023)",
                  "fullTitle": "Parser parseMail should parse time changes (2023)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/time-changed/de_2023.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"change\");assert.strictEqual(result.orderId,\"ecqpn6ux8sd\");assert.ok(result.time.from.isSame(import_moment_timezone.default.tz(\"2023-06-28T18:20:00.000\",\"Europe/Berlin\")),`${result.time.from.toJSON()} === 2023-06-28T18:20:00.000`);assert.ok(result.time.to.isSame(import_moment_timezone.default.tz(\"2023-06-28T19:30:00.000\",\"Europe/Berlin\")),`${result.time.to.toJSON()} === 2023-06-28T19:30:00.000`)",
                  "err": {},
                  "uuid": "1b67ba44-f158-4c82-bf92-bd46e0a348ed",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should parse time changes (2024)",
                  "fullTitle": "Parser parseMail should parse time changes (2024)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/time-changed/de_2024.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"change\");assert.strictEqual(result.orderId,\"8grepd07bgz\");assert.ok(result.time.from.isSame(import_moment_timezone.default.tz(\"2024-01-10T15:30:00.000\",\"Europe/Berlin\")),`${result.time.from.toJSON()} === 2024-01-10T15:30:00.000`);assert.ok(result.time.to.isSame(import_moment_timezone.default.tz(\"2024-01-10T15:45:00.000\",\"Europe/Berlin\")),`${result.time.to.toJSON()} === 2024-01-10T15:45:00.000`)",
                  "err": {},
                  "uuid": "129347b4-2a5c-4e09-9073-aeef37f93653",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2020)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2020)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/invoice/de_2020.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"too38e9h7io\");assert.ok(result.invoicedAt.isSame((0,import_moment_timezone.default)(\"2020-07-29T18:17:44.000Z\")))",
                  "err": {},
                  "uuid": "a1b9a887-1e8e-4694-b063-f43bb46e7460",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2021)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2021)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/invoice/de_2021.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"dfaxqeu6f8d\");assert.ok(result.invoicedAt.isSame((0,import_moment_timezone.default)(\"2021-04-30T15:22:55.000Z\")))",
                  "err": {},
                  "uuid": "c1edacfa-07dd-494e-9d36-acf0e8345155",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect invoice mails (2023)",
                  "fullTitle": "Parser parseMail should detect invoice mails (2023)",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/invoice/de_2023.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"invoice\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"rio3sec8wgb\");assert.ok(result.invoicedAt.isSame((0,import_moment_timezone.default)(\"2023-07-24T17:29:16.000Z\")))",
                  "err": {},
                  "uuid": "3897ce08-7422-40f7-99f4-07f121799380",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (1)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (1)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/cancellation/de_1.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"cancel\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"gd3sypjntuz\");assert.ok(result.cancelledAt.isSame((0,import_moment_timezone.default)(\"2023-07-05T17:23:43.000Z\")))",
                  "err": {},
                  "uuid": "eaa326aa-7137-421d-bbd6-1ed164187666",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should detect cancellation mails (2)",
                  "fullTitle": "Parser parseMail should detect cancellation mails (2)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mail=await(0,import_promises.readFile)(fixtures+\"/cancellation/de_2.eml\",\"utf-8\");const result=await import_parser.default.parseMail(mail);assert.ok(result);assert.strictEqual(result.type,\"cancel\");assert.strictEqual(result.to,\"**********@tgtg-ical.sebbo.net\");assert.strictEqual(result.orderId,\"q3uxig9diky\");assert.ok(result.cancelledAt.isSame((0,import_moment_timezone.default)(\"2023-03-09T12:08:29.000Z\")))",
                  "err": {},
                  "uuid": "9408e833-3f0d-403d-b9d1-a3670f38411c",
                  "parentUUID": "996859ba-402b-4040-82ee-fadead7a7d99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b824db04-181f-44df-bab9-935889bb1795",
                "6131a5a0-00a8-4144-b077-8ac8e2e14011",
                "6996637f-0017-43ea-844f-dbfc9d6d0e91",
                "9fe36b49-491f-449d-b001-03dca973a591",
                "2efde80c-03eb-4b25-8d3f-0f58bb35d99f",
                "3a03737c-d4fb-47f9-963c-7ba0c181b1ad",
                "1b67ba44-f158-4c82-bf92-bd46e0a348ed",
                "129347b4-2a5c-4e09-9073-aeef37f93653",
                "a1b9a887-1e8e-4694-b063-f43bb46e7460",
                "c1edacfa-07dd-494e-9d36-acf0e8345155",
                "3897ce08-7422-40f7-99f4-07f121799380",
                "eaa326aa-7137-421d-bbd6-1ed164187666",
                "9408e833-3f0d-403d-b9d1-a3670f38411c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 93,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}